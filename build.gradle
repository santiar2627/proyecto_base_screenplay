plugins {
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'net.serenity-bdd.serenity-gradle-plugin' version '4.0.12'
    id 'org.sonarqube' version '6.0.1.5171'
}

group = 'co.com.qa'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    toolchain { languageVersion = JavaLanguageVersion.of(11) }
}

wrapper {
    gradleVersion = '8.10'
    distributionType = Wrapper.DistributionType.ALL
}

repositories { mavenCentral() }

ext {
    serenityVersion = '4.0.12'
    lombokVersion   = '1.18.34'
}

dependencies {
    // Serenity core + Screenplay + Cucumber
    implementation "net.serenity-bdd:serenity-core:${serenityVersion}"
    implementation "net.serenity-bdd:serenity-junit:${serenityVersion}"
    implementation "net.serenity-bdd:serenity-screenplay:${serenityVersion}"
    implementation "net.serenity-bdd:serenity-screenplay-webdriver:${serenityVersion}"
    implementation "net.serenity-bdd:serenity-screenplay-rest:${serenityVersion}"
    implementation "net.serenity-bdd:serenity-cucumber:${serenityVersion}"

    // Reporte de una sola página (opcional)
    implementation "net.serenity-bdd:serenity-single-page-report:${serenityVersion}"

    // Utilidades
    implementation 'io.rest-assured:rest-assured:5.4.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'
    implementation 'ch.qos.logback:logback-classic:1.4.11'
    implementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    implementation 'io.github.bonigarcia:webdrivermanager:5.9.2'
    testImplementation 'junit:junit:4.13.2'

    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

tasks.withType(Test).configureEach {
    def forks = Runtime.runtime.availableProcessors().intdiv(2)
    maxParallelForks = Integer.max(1, forks)
    systemProperties(System.getProperties())
    // Si quieres que falle el build cuando falle un test, pon false
    ignoreFailures = true
    testLogging {
        events "FAILED", "SKIPPED"
        exceptionFormat "FULL"
    }
}

// Tras test, genera cobertura y reporte Serenity
tasks.named('test') {
    finalizedBy 'jacocoTestReport', 'aggregate'
}

// (Opcional) Single-page report
serenity {
    reports = ["single-page-html"]
}

jacoco {
    toolVersion = "0.8.10"
}
tasks.named('jacocoTestReport', JacocoReport) {
    dependsOn tasks.named('test')
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    classDirectories.setFrom(fileTree(dir: "$buildDir/classes/java/main"))
    sourceDirectories.setFrom(files("src/main/java"))
    executionData.setFrom(fileTree(dir: buildDir, includes: [
            "jacoco/test.exec",
            "outputs/unit_test_code_coverage/*coverage.ec"
    ]))
}

/** ===========================
 *  Configuración SonarQube/SonarCloud
 *  =========================== */
sonarqube {
    properties {
        // Soporta SonarCloud o SonarQube on-prem leyendo de variables de entorno si existen
        property "sonar.projectKey",       System.getenv("SONAR_PROJECT_KEY") ?: "demo-serenity-screenplay"
        property "sonar.organization",     System.getenv("SONAR_ORG") ?: "demo-org"              // Requerido en SonarCloud
        property "sonar.host.url",         System.getenv("SONAR_HOST_URL") ?: "https://sonarcloud.io"
        // Para SonarCloud: usa SONAR_TOKEN como credencial (configurada en el ambiente del runner/jenkins)
        // Para SonarQube on-prem también funciona con SONAR_TOKEN o credenciales en Jenkins.

        property "sonar.sourceEncoding",   "UTF-8"
        property "sonar.java.source",      "11"
        property "sonar.sources",          "src/main/java"
        property "sonar.tests",            "src/test/java"
        property "sonar.java.binaries",    "build/classes/java/main"

        // Reportes de pruebas y cobertura
        property "sonar.junit.reportPaths",                    "build/test-results/test"
        property "sonar.coverage.jacoco.xmlReportPaths",       "${buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"

        // Excluir clases generadas o plantillas si aplica
        property "sonar.exclusions", "**/*Generated.java, **/*Templates.java"
    }
}

/** Encadenamiento para CI:
 *  - Asegura que sonarqube se ejecute después de tener pruebas, cobertura y reporte listos.
 */
tasks.named('sonarqube') {
    dependsOn 'test', 'jacocoTestReport', 'aggregate'
    mustRunAfter 'test', 'jacocoTestReport', 'aggregate'
}